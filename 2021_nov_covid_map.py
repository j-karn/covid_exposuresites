# -*- coding: utf-8 -*-
"""2021_Nov_COVID_map

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uVMWs_Y0yBSpUhz9SgXbhWvmOqU2S7g0
"""

# libraries for working with json
import requests
import json
import urllib as ul
import pandas as pd

url = 'https://data.nsw.gov.au/data/dataset/0a52e6c1-bc0b-48af-8b45-d791a6d8e289/resource/f3a28eed-8c2a-437b-8ac1-2dab3cf760f9/download/covid-case-locations-20210805-1000.json'
response = ul.request.urlopen(url)
rawdata = json.loads(response.read())

# libraries for graphing
import plotly.graph_objs as go
import plotly.express as px
from plotly.subplots import make_subplots

# library for counting
from collections import Counter

inner_data = rawdata['data']

# flatting JSON into a flat table
exposed_venues = pd.json_normalize(inner_data,'monitor')

exposed_venues

# getting table info
exposed_venues.describe()

# getting column data type
exposed_venues.dtypes

# pivoting by Suburb
pivot_exposed_venues = exposed_venues.pivot_table(
    index = 'Suburb',
    columns = 'Alert',
    aggfunc = 'size'
).fillna(0).astype(int)

pivot_exposed_venues

pivot_exposed_venues.reset_index(inplace=True)

# Adding a total of days column with the sum value
pivot_exposed_venues["Exposed occasions"] = pivot_exposed_venues.sum(axis=1)

pivot_exposed_venues

# Creating table for cases by suburb

total_exposed_days = pivot_exposed_venues[['Suburb', 'Exposed occasions']].sort_values(by=['Exposed occasions'], ascending=False)
total_exposed_days

# Graphing cases by suburb

fig = px.bar(total_exposed_days.head(20),
             y='Exposed occasions',
             x='Suburb',
             color='Suburb')

fig.update_layout(
    title="Number of exposures to COVID cases over last 14 days, by Suburb",
    xaxis_title="Suburbs",
    yaxis_title="Number of occasions",
    font=dict(
        family="default",
        size=12,
        color="#7f7f7f"
    )
)

fig.show()

# Selecting columns for location mapping
venue_mapping = exposed_venues[['Venue', 'Lon', 'Lat']]
venue_mapping

# Count the frequency of venue
freq_count = Counter(exposed_venues['Venue'])
#print(freq_count)

type(freq_count)

# Converting dictionary back to dataframe
location_count = pd.DataFrame.from_dict(freq_count, orient='index').reset_index()

# rename column head
location_count = location_count.rename(columns={'index':'Venue', 0:'Exposures'})

location_count

venue_mapping_table = venue_mapping.copy()

# remove duplicates to get unique venue
venue_mapping_table.drop_duplicates(inplace=True, ignore_index=True)
venue_mapping_table

# Merge the venue table with count of days exposed to positive case
venue_mapping_table_graph = pd.merge(venue_mapping_table, location_count,on='Venue', how='left')
venue_mapping_table_graph

venue_mapping_table_graph.dtypes

# Change Lon & Lat data type to float
venue_mapping_table_graph['Lon'] = venue_mapping_table_graph['Lon'].astype(float)
venue_mapping_table_graph['Lat'] = venue_mapping_table_graph['Lat'].astype(float)

venue_mapping_table_graph.dtypes

from google.colab import userdata
sec = userdata.get('mapbox_access')

YOUR_MAPBOX_ACCESS_TOKEN = sec
items = json.loads(
  requests.get('https://api.mapbox.com/tokens/v2/kittlesjay?access_token=YOUR_MAPBOX_ACCESS_TOKEN').text
)

# Graphing with mapbox

#px.set_mapbox_access_token(open("mapbox_api_key.txt").read())
fig = px.scatter_mapbox(venue_mapping_table_graph,
                    lat=venue_mapping_table_graph['Lat'],
                    lon=venue_mapping_table_graph['Lon'],
                    hover_name='Venue',
                    height=800, width=1000,
                    zoom=10,
                    size="Exposures",
                    color="Exposures",
                    title="Venues and number of exposures to confirmed COVID cases",
                    mapbox_style="open-street-map"
                       )

fig.show()